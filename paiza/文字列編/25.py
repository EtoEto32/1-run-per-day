# 普通にムズイこれ。
"""
ミスの種類は 3 つありますが、 1 つずつ丁寧に判別していきましょう。
まずは数値が小数かどうかを「文字列に . が含まれるかどうか」で判定しましょう。

条件 1 「先頭に必要のない 0 がいくつかついてしまう」

文字列が整数のとき
先頭の不要な 0 を取りのぞければ良いので、一番左の 0 でない数字以降の数字を出力すれば良いです。
全ての数字が 0 であるときには 0 を出力するような例外処理をしましょう。

文字列が小数のとき
12.345 のような整数部が 0 でない時は、上と同様にして処理することができます。
0.123 のような場合は、小数点の位置を基準にして 0 を 1 つつけることで処理します。

条件 2 「小数である数値の末尾に必要のない 0 がいくつかついてしまう」
条件 1 を逆向きに利用します。
最後の 0 でない数字以降の文字は全て 0 で不要であるから読み飛ばすという処理を行います。

条件 3 「小数である数値に小数点が複数個ついてしまうただし、 1 つめの小数点の位置が正しい小数点の位置であるものとします」
これは、文字列中に現れる小数点のうち、最初のもの以外を読み飛ばすことで実現できます。
"""
s = input()
# 文字列sに小数点が含まれているかどうかを確認する。
if "." not in s:  # 整数かどうか
    i = 0
    while i < len(s):
        if s[i] != "0":
            break
        i += 1
    if i == len(s):  # つまりこれは全て0の文字→例外処理
        print(0)
    else:  # 0を除いた部分文字をスライスで表現
        print(s[i:])
    # 文字列を順番にみて、最後のゼロじゃない文字が
    # 見つかるまでゼロをスキップする。
else:  # つまり小数だったら
    ans = ""
    start = 0

    for i in range(len(s)):
        if s[i] != "0":
            if s[i] == ".":
                ans += "0"
            start = i#小数点の位置
            break
    last = 0
    for i in range(len(s)):
        if s[i] != "0":
            last = i
    first_dot = s.find(".")
    for i in range(start, last + 1):
        if s[i] != ".":
            ans += s[i]
        elif i == first_dot:
            ans += s[i]
    print(ans)
# 最初のゼロじゃない文字または小数点を見つけるまで
# ゼロをスキップする。

# その後、最後のゼロじゃない文字を見つけ、最初の小数点の位置を特定する
# そして、最初の非ゼロ文字から最後の非ゼロ数字までの範囲で、
# 各文字をチェックします。小数点は最初のものだけを含め、それ以外は無視します。最後に、結果の文字列を出力します。
