# joinメソッドの正しい使い方。

# 学びたての認識

v = ["hello", "world"]
print("".join(v))  # helloworld
# 要素は当然str型でないといけない

# ############################################################################################

s = ["A", "B", "C", "D"]
print("->".join(s))  # A->B->C->D
# ############################################################################################

# joinの引数はリストだけではない
# イテレーターも引数にできる
# ############################################################################################
# tuple
print(" ".join(("やせいの", "ポッポ", "が", "あらわれた!")))
# やせいの ポッポ が あらわれた!
# dict
print(" ".join({"name": "taro", "age": 20}))
# name age
# str
print("・".join("ひみつ"))
# ひ・み・つ
# ジェネレータ式（イテレーターを生成する特殊関数）
print("".join(str(i) for i in [0, 90, 1234, 5678]))
# 09012345678
# ジェネレータ式を使う方法は、
# リストに変換する処理が省かれるので、速度的にもメモリ的にも効率的です。
# map関数を使う方法もありますが、ジェネレータ式の方が速度的にもメモリ的にも効率的です。
# map
print("".join(map(str, [0, 90, 1234, 5678])))
# 他にもfileオブジェクトや、rangeオブジェクト、filterオブジェクト、zipオブジェクトなども引数にできます。
